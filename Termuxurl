#!/data/data/com.termux/files/usr/bin/bash
RED='\033[0;31m'
NC='\033[0m' # No Color
LGREEN='\033[1;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
LGRAY='\033[0;37m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
printf "$LGREEN"
echo ""
echo "Updating Script..."
echo ""
curl https://raw.githubusercontent.com/sempogi/termuxurl/main/Termuxurl -o ~/bin/termux-url-opener
dos2unix ~/bin/termux-url-opener

ytdir=~/storage/shared/youtube
if [[ ! -d $ytdir ]]; then
        # directory doesn't exist create it for use.
        mkdir $ytdir
    else
         printf "$BLUE"
         ytversion=$(youtube-dl --version)
         echo "Youtube: Dir Ok"
         echo  "Youtube-dl: $ytversion"
         AtomicParsley --version
         printf "$NC"
         echo "checking ytdl update....."
         printf "$GREEN"
         pip install --upgrade youtube_dl

    fi

sleep 5
clear
#*******
#Black        0;30     Dark Gray     1;30
#Red          0;31     Light Red     1;31
#Green        0;32     Light Green   1;32
#Brown/Orange 0;33     Yellow        1;33
#Blue         0;34     Light Blue    1;34
#Purple       0;35     Light Purple  1;35
#Cyan         0;36     Light Cyan    1;36
#Light Gray   0;37     White         
#**********
printf "$RED"
echo "______________________________________"
echo ""
figlet " " CODEX45
printf "$CYAN"
echo "               Script Modified by;"
printf "$LGREEN"
echo "                       semsabiduria"
printf "$RED"
echo "______________________________________"
printf "$LGRAY"
echo "Description: Audio/Video Downloader"
echo "Tools: Quick Edit+, Termux,MIA3"
echo " Supported Sites: Youtube.com,Pornhub.com"
echo " Dailymotion and Facebook and many more..."
echo " Playlist Content can be downloaded also "
printf "$NC"
url=$1
echo " Url Source:"
printf "$BLUE"
echo $url
#echo "Starting to play"




#termux-notification --type media --media-previous "echo 'prev' " --media-play " termux-toast $url " --media-pause " echo 'pause' " --media-next " echo 'next' "  -t "ðŸŽ§Online Player: $$" -c "Playing: $url" --sound --vibrate 800 --priority high --type media --icon "pause" --id $$ --on-delete "exit"  --image-path "$HOME/test.png"







#mpv $url
printf "$NC"
sleep 5

video_grab(){
#start of ytdl script
title=$(youtube-dl --get-title  $1)
echo "$title"
echo "_________________________________"
echo "             Video Grabber "
echo "Source: "
echo  "$1"
echo "_________________________________"

dialog --title "Audio Video Grabber" \
--menu "Title: $title Url Source $1" 0 0 0 \
  B "Best Video and Audio Available" \
  1 "Audio Only Mp3" \
  2 "Audio Only M4a" \
  3 "Download via video via tor" \
  4 "Download Audio via tor" \
  5 "Download 480p Video" \
  6 "Download 720p video" \
  7 "Download 1080p Video if available" \
  8 "Download 2k Video if available" \
  9 "Download 4k Video if available" \
  0 "Expert Mode" \
  t "Download m4a audio playlist" \
  q "Exit Program" \
  u "Update core downloader" 2>menu1

                   option=$(<menu1)



myorder='--no-warnings --no-progress --no-mtime --yes-playlist -o /data/data/com.termux/files/home/storage/shared/Youtube/%(playlist)s/%(playlist_index)s.%(title)s.%(ext)s -f'
command='--no-warnings --embed-thumbnail --no-mtime --all-subs -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'


echo -e "Parsing Data please wait......"


case $option in
1 )

command='--no-warnings --no-mtime --embed-thumbnail --add-metadata -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
echo "$command 140 -x --audio-format mp3" > ~/.config/youtube-dl/config

printf "$GREEN"
dialog --prgbox "Extracting Mp3 $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"

filmp3="/data/data/com.termux/files/home/storage/shared/Youtube/$title.mp3"
filmp3= "$(realpath -m "$filmp3")"
termux-media-player play "$filmp3"
minfo= "$(termux-media-player info)"
echo $filmp3 > tmp.list

termux-notification --type media --media-previous "termux-media-player play '$(<tmp.list)'" --media-play "termux-media-player play" --media-pause "termux-media-player pause" --media-next "termux-media-player pause"  -t "ðŸŽ§Offline Player: $title " -c " Playing: $filmp3 " --sound --vibrate 800 --priority high --type media --id $$ --on-delete " termux-media-player stop "  --image-path "$HOME/test.png"
#echo "$filmp3"

#sleep 30
;;

2 )

command='--no-warnings --no-mtime -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
echo "$command 140 " > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Extracting m4a $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

3 )

command='--no-warnings --no-mtime --all-subs --proxy socks5://127.0.0.1:9050  -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
echo "$command best" > ~/.config/youtube-dl/config # " -f best " > best video+audio
printf "$GREEN"
dialog --prgbox "Downloading via tor $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

4 )
command='--no-warnings --no-mtime --all-subs --proxy socks5://127.0.0.1:9050  -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
echo "$command 140 -x --audio-format mp3" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading mp3 via tor $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;


5 )
echo "$command \"best[height<=480]\"" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading 480p video $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

6 )
echo "$command \"best[height<=760]\"" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading 720 video $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

7 )
echo "$command \"best[height<=1150]\"" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading 1080p video $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

8 )
echo "$command \"best[height<=1440]\"" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading 2k video $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

9 )
echo "$command \"best[height<=2160]\"" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading 4k video $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

0 )
youtube-dl -F $1
echo ""
echo "Format Code:"
echo "137 : HDVideo no Audio"
echo  "140 : HDAudio"
echo  "Check the display for correct format code"
echo  " Enter Format Code"
read fcode
echo ""
echo "$command $fcode" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

q )
exit
;;

u)
echo "Trying to fix/update your package."
pip install --upgrade youtube_dl
pkg install atomicparsley
pkg install dialog
;;

t)
echo "$myorder 140" > ~/.config/youtube-dl/config
printf "$GREEN"
dialog --prgbox "Downloading $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

B)
echo -e "Finding Best Quality of Your Video"
echo "$command best" > ~/.config/youtube-dl/config # " -f best " > best video+audio
printf "$GREEN"
dialog --prgbox "Downloading Best Video and Audio $1" "youtube-dl $1" 50 60 || youtube-dl $1
printf "$NC"
;;

esac
termux-notification -t "Download Complete" -c "$title" --sound --vibrate 800 --priority high
exit
#end of youtube
}

#_________________________________
genvid(){
echo " This will download HD Videos"
echo "Souce:$1"
echo "Save to:$2"
echo "Description:$3"
dlt=$(youtube-dl --get-title  $1)
saveto=$2
echo "Title: $dlt"
   
    # check if directory exist or not
    if [[ ! -d $saveto ]]; then
        # directory doesn't exist create it for use.
        mkdir $saveto
    fi
#command='--no-warnings --no-progress --no-mtime --all-subs -o  /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
command="--no-warnings --no-mtime --all-subs -o  $saveto/%(title)s.%(ext)s -f"

echo -e "Finding Best Quality of Your Video $3"
echo "$command best" > ~/.config/youtube-dl/config # " -f best " > best video+audio
printf "$GREEN"
youtube-dl $1
printf "$NC"
termux-notification -t "Download Complete" -c "$dlt" --sound --vibrate 800 --priority high

}
#__________________________________


case $url  in
       *"open.spotify.com"* )
                echo "spotify"
          #start of spotify
               SONG_DIR="$HOME/storage/shared/songs" 
               NODE_ENV=$(which node)
               SPOTIFYDL=$(which spotifydl)

                 echo "Spotifydl"
                   # check if directory exist or not
                 if [[ ! -d $SONG_DIR ]]; then
                   # directory doesn't exist create it for use.
                          mkdir $SONG_DIR
                  fi
                 # Download the song to song directory.
                   $NODE_ENV $SPOTIFYDL $url -o $SONG_DIR
                   #spotifydl -o $SONG_DIR $url
                    read -n 1 -s -p "Press any key to exit..."
                    termux-notification -t "Download Complete" -c "$url" --sound --vibrate 800 --priority hig    
           ;;
                 #end of spotify script

         *"/playlist"* )
                printf "$GREEN"
                 echo "Playlist Link Detected"
                 DIALOG=${DIALOG=dialog}

$DIALOG --title "Playlist Detected" --clear \
        --inputbox "Please Enter Folder Name" 10 30 "mp3s" 2>foldername


folname=$(<foldername)


                  
                  #whitespace workaround
                  orig="$folname"
                  mod=${orig//[ ]/_}

                  printf "$NC"
                  mp3dir="$HOME/storage/shared/mp3s/$mod"   
                           # check if directory exist or not
                  if [[ ! -d $mp3dir ]];  then
                            # directory doesn't exist create it for use.
                              mkdir $mp3dir

                             #mkdir -p "$(realpath -m "$mp3dir")"
                             #accept whitespace in creating directory
                             #unfortunately ytdl dont accept whitespace
                   fi

                    command="--ignore-errors --no-warnings --embed-thumbnail --skip-unavailable-fragments --no-mtime --add-metadata -o $mp3dir/%(title)s.%(ext)s -f"
                  

                    dialog --title "SElECT" \
--menu "Audio Format" 0 0 0 \
  MP3 "MP3-Standard Audio.Wide Compatability,Slower." \
  M4A "M4a-Faster Download, Good Audio Quality,Less Compa." \
  MP4TOMP3 "DOWNLOAD AND CONVERT" \
  MP4 "Video Format " 2>filtype

                   mpmp=$(<filtype)
                   case $mpmp in
                    MP3)
                     
                    echo "$command 140 -x --audio-format mp3" > ~/.config/youtube-dl/config
                     ;;
                     
                    M4A)
                      
                  
                     echo "$command 140 " > ~/.config/youtube-dl/config
                     ;;
                    *)
                    echo "$command best" > ~/.config/youtube-dl/config # " -f best " > best video+audio
                     ;; 
                     esac

                   
                    printf "$YELLOW"
                 dialog --prgbox "Downloading $url" "youtube-dl $url" 60 60 || youtube-dl $url
                  #youtube-dl $url 
                    #cd $mp3dir
                     case $mpmp in
                    MP4TOMP3)
                    find $mp3dir -name "*.mp4" -exec ffmpeg -i {} -ab 160k -map_metadata 0 -id3v2_version 3 {}.mp3 \;
                    find $mp3dir -name "*.mp4*" -exec rm
                    ;;
                    esac
 
                    printf "$NC"
                    title=$(youtube-dl --get-title  $url)
                    termux-notification -t "Download Complete" -c "$title" --sound --vibrate 800 --priority high
               ;;


             *"music.youtube"* )
                     mp3dir="$HOME/storage/shared/mp3s"   
                        # check if directory exist or not
                     if [[ ! -d $mp3dir ]];  then
                        # directory doesn't exist create it for use.
                                mkdir $mp3dir
                     fi
                     command="--no-warnings --add-metadata --embed-thumbnail --all-subs --convert-subs lrc --no-mtime -o $mp3dir/%(title)s.%(ext)s -f"
                     echo "$command 140 -x --audio-format mp3" > ~/.config/youtube-dl/config
                     printf "$GREEN"
                    dialog --prgbox "Downloading $url" "youtube-dl $url" 50 60 || youtube-dl $url
                    printf "$NC"
                    title=$(youtube-dl --get-title  $url)
                     termux-notification -t "Download Complete" -c "$title" --sound --vibrate 800 --priority high
             ;;


             *"pornhub.com"* )
                    printf "$YELLOW"
                    echo "Warning: Adult Site,Please use VPN"
                    sleep 5
                    printf "$NC"
                    genvid $1 "/data/data/com.termux/files/home/storage/shared/phubs/"  "Pornhub.com"
              ;;


            *"youtu.be"* )
                  video_grab $url
            ;;
            
           *"youtube"* )
                command='--no-warnings --no-mtime -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'
                echo "$command 140" > ~/.config/youtube-dl/config
                 printf "$GREEN"
                 dialog --prgbox "Downloading $1" "youtube-dl $1" 50 60 || youtube-dl $1
                 printf "$NC"
            ;;

          *fb.watch* )
                genvid $url  "/data/data/com.termux/files/home/storage/shared/Fbvideos" "Fb Video Grabber"
            ;;


            * )
                 echo "Website Not Implemented"
                 echo "1. Try Video Downloader"
                 echo  "2. Try File Downloader"
                 echo "Select Option"
                 read ptype
                       case  $ptype in
                            1)
                                 genvid $url  "/data/data/com.termux/files/home/storage/shared/Video" "Universal Video"
                             ;;
                            2)
                                 cd /sdcard/Download
                                echo "Enter UserName"
                                read uname
                                echo "Enter Password"
                                read pword
                                wget --user=$uname --password=$pword $1
                              ;;
                       esac

termux-notification -t "Download Complete" -c "$1" --sound --vibrate 800 --priority hig

;;
esac

exit





